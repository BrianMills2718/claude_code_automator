# Python Calculator Implementation Tasks

## Current Status
- Milestone 1: COMPLETED (Basic arithmetic operations implemented)
- Milestone 2: NOT STARTED (Advanced operations)
- Milestone 3: NOT STARTED (Expression parser)

## File Structure
```
Python Calculator/
├── main.py                 # Main entry point (EXISTS)
├── requirements.txt        # Dependencies (EXISTS)
├── src/
│   ├── __init__.py        # Package init (EXISTS)
│   ├── calculator.py      # Basic operations (EXISTS)
│   ├── advanced.py        # Advanced operations (TO CREATE)
│   └── parser.py          # Expression parser (TO CREATE)
└── tests/
    ├── unit/
    │   ├── test_calculator.py     # Basic ops tests (EXISTS)
    │   ├── test_advanced.py       # Advanced ops tests (TO CREATE)
    │   └── test_parser.py         # Parser tests (TO CREATE)
    ├── integration/
    │   ├── test_calculator.py     # Integration tests (EXISTS)
    │   └── test_full_calculator.py # Full calculator tests (TO CREATE)
    └── e2e/
        └── test_cli.py            # CLI tests (TO CREATE)
```

## Milestone 2: Advanced Operations

### Task 2.1: Create Advanced Operations Module
**File**: src/advanced.py
**Functions**:
```python
def power(base: Number, exponent: Number) -> Number:
    """Raise base to the power of exponent"""
    
def sqrt(n: Number) -> float:
    """Calculate square root of n"""
    
def modulo(a: Number, b: Number) -> Number:
    """Calculate a modulo b"""
```

### Task 2.2: Update Main Entry Point
**File**: main.py
**Changes**:
- Import advanced operations from src.advanced
- Add 'power', 'sqrt', 'modulo' to available operations
- Add handling for these operations in the main loop

### Task 2.3: Create Unit Tests for Advanced Operations
**File**: tests/unit/test_advanced.py
**Tests**:
- test_power_positive_numbers()
- test_power_negative_base()
- test_power_zero_exponent()
- test_sqrt_positive_number()
- test_sqrt_zero()
- test_sqrt_negative_raises_error()
- test_modulo_positive_numbers()
- test_modulo_negative_numbers()
- test_modulo_by_zero_raises_error()

### Task 2.4: Update Integration Tests
**File**: tests/integration/test_full_calculator.py
**Tests**:
- Test all operations work together
- Test error handling across modules

## Milestone 3: Expression Parser

### Task 3.1: Create Expression Parser Module
**File**: src/parser.py
**Classes and Functions**:
```python
class Token:
    """Represents a token in the expression"""
    def __init__(self, type: str, value: Union[str, Number])
    
class Lexer:
    """Tokenizes mathematical expressions"""
    def __init__(self, expression: str)
    def tokenize(self) -> List[Token]
    
class Parser:
    """Parses and evaluates mathematical expressions"""
    def __init__(self, tokens: List[Token])
    def parse(self) -> Number
    
def evaluate_expression(expression: str) -> Number:
    """Main function to evaluate a mathematical expression"""
```

### Task 3.2: Expression Grammar Support
**Features**:
- Basic arithmetic: +, -, *, /
- Advanced operations: ^(power), %(modulo)
- Parentheses for grouping: (2 + 3) * 4
- Unary operators: -5, +3
- Floating point numbers: 3.14
- Function calls: sqrt(16)

### Task 3.3: Update Main for Expression Mode
**File**: main.py
**Changes**:
- Add 'expression' mode
- Import and use evaluate_expression
- Handle parser errors gracefully

### Task 3.4: Create Parser Unit Tests
**File**: tests/unit/test_parser.py
**Tests**:
- test_tokenize_simple_expression()
- test_tokenize_with_parentheses()
- test_tokenize_with_functions()
- test_parse_addition()
- test_parse_multiplication_precedence()
- test_parse_parentheses()
- test_parse_nested_parentheses()
- test_parse_function_calls()
- test_parse_invalid_expression()

### Task 3.5: Create End-to-End Tests
**File**: tests/e2e/test_cli.py
**Tests**:
- test_cli_basic_operations()
- test_cli_advanced_operations()
- test_cli_expression_mode()
- test_cli_error_handling()
- test_cli_quit_command()

## Implementation Order

1. **Milestone 2 - Advanced Operations** (Priority: High)
   - Task 2.1: Create advanced.py with power, sqrt, modulo
   - Task 2.3: Create unit tests for advanced operations
   - Task 2.2: Update main.py to integrate advanced operations
   - Task 2.4: Create integration tests

2. **Milestone 3 - Expression Parser** (Priority: Medium)
   - Task 3.1: Create parser.py with Token, Lexer, Parser classes
   - Task 3.4: Create comprehensive parser unit tests
   - Task 3.2: Implement full expression grammar
   - Task 3.3: Update main.py for expression mode
   - Task 3.5: Create end-to-end CLI tests

## Error Handling Strategy

### Advanced Operations Errors
- **NegativeSqrtError**: When sqrt() called with negative number
- **ModuloByZeroError**: When modulo by zero attempted
- **OverflowError**: When power operation result too large

### Parser Errors
- **SyntaxError**: Invalid expression syntax
- **UnknownFunctionError**: Unrecognized function name
- **UnmatchedParenthesesError**: Mismatched parentheses

## Testing Strategy

### Unit Tests
- Test each function in isolation
- Mock dependencies where needed
- Cover edge cases and error conditions

### Integration Tests
- Test module interactions
- Verify error propagation
- Test combined operations

### End-to-End Tests
- Test CLI interface
- Verify user prompts and outputs
- Test error messages shown to users
- No mocking - use real implementations

## Type Annotations

All new code must include:
- Full type hints for parameters and return values
- Custom type aliases where appropriate
- Must pass mypy --strict

## Code Quality Requirements

- All code must pass flake8 (max-line-length=100)
- Descriptive function/variable names
- Comprehensive docstrings
- Clear error messages